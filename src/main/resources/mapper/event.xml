<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.multi.hereevent.event">
    <select id="insertEvent" parameterType="event">
        insert into event (category_no, name, start_date, end_date, addr, info, homepage, sns, img_path, type, reserve_limit, wait_limit)
        values (#{category_no}, #{name}, #{start_date}, #{end_date}, #{addr}, #{info}, #{homepage}, #{sns}, #{img_path}, #{type}, #{reserve_limit}, #{wait_limit})
    </select>
    <!-- 이벤트 수정-->
    <update id="updateEvent" parameterType="event">
        update event
        set category_no = #{category_no},
            name = #{name},
            start_date = #{start_date},
            end_date = #{end_date},
            addr = #{addr},
            info = #{info},
            homepage = #{homepage},
            sns = #{sns},
            img_path = #{img_path},
            type = #{type},
            reserve_limit = #{reserve_limit},
            wait_limit = #{wait_limit}
        WHERE event_no=#{event_no}
    </update>
    <delete id="deleteEvent">
        DELETE FROM event
        WHERE event_no IN
        <foreach item="id" index="index" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <select id="searchEvent" parameterType="String" resultType="event">
        SELECT *
        FROM event
        WHERE name Like CONCAT('%', #{keyword} ,'%')
    </select>

<!--wait_limit호출-->
    <select id="getWaitLimit" parameterType="int" resultType="int">
        SELECT wait_limit
        FROM event
        WHERE event_no = #{event_no}
    </select>

    <!-- 메인 화면 이벤트 조회 -->
    <!-- 진행중인 이벤트 -->
    <select id="getOnGoingEvent" resultType="event">
    SELECT * FROM event
    where start_date &lt; sysdate() AND end_date &gt; sysdate()
    limit 10
    </select>
    <!-- 전체 -->
    <select id="getAllEvent" resultType="event">
        SELECT e.*, AVG(r.star) AS avg_star
        FROM event e LEFT JOIN review r ON e.event_no = r.event_no
        WHERE e.start_date &lt;= curdate() and e.end_date >= curdate() <!--진행 중-->
        GROUP BY e.event_no
        ORDER BY e.end_date
    </select>
    <!-- 오픈 예정 -->
    <select id="getOpenEvent" resultType="event">
        SELECT e.*, AVG(r.star) AS avg_star
        FROM event e LEFT JOIN review r ON e.event_no = r.event_no
        WHERE e.start_date > curdate()
        GROUP BY e.event_no
        ORDER BY e.start_date
    </select>
    <!-- 인기순 -->
    <select id="getPopularEvent" resultType="event">
        SELECT e.*, AVG(rev.star) AS avg_star,
            COUNT(DISTINCT r.member_no) + COUNT(DISTINCT w.email) AS total_count
        FROM event e
            LEFT JOIN reserve r ON e.event_no = r.event_no
            LEFT JOIN wait w ON e.event_no = w.event_no
            LEFT JOIN review rev ON e.event_no = rev.event_no
        WHERE e.start_date &lt;= curdate() and e.end_date >= curdate() <!--진행 중-->
        GROUP BY e.event_no
        ORDER BY total_count DESC, end_date, start_date <!-- count 가 같은 경우 end_date 오름차순 후 start_date 오름차순 정렬-->
        LIMIT 10
    </select>
    <!--별점순 -->
    <select id="getEventByStarRank" resultType="event">
        SELECT e.*, AVG(r.star) AS avg_star
        FROM event AS e
            JOIN review AS r ON e.event_no = r.event_no
        WHERE e.start_date &lt;= curdate() and e.end_date >= curdate() <!--진행 중-->
        GROUP BY e.event_no
        ORDER BY avg_star DESC, end_date, start_date <!-- 별점이 같은 경우 end_date 오름차순 후 start_date 오름차순 정렬-->
        limit 10
    </select>
    <!--카테고리별 이벤트 4개씩 조회-->
    <select id="fourEventByCategory" resultType="event">
        SELECT *
        FROM event
        WHERE category_no = #{category_no}
        ORDER BY end_date desc
        LIMIT 4
    </select>

    <!-- 리스트 페이지 이벤트 조회 -->
    <!-- 전체 -->
    <select id="getAllEventWithCondition" parameterType="map" resultType="event">
        SELECT e.*, AVG(r.star) AS avg_star
        FROM event e LEFT JOIN review r ON e.event_no = r.event_no
        <where>
            <if test="state != null and state.size > 0">
                and
                <foreach collection="state" item="val" separator="or" open="(" close=")">
                    <if test='val == "still"'> <!-- 진행 중 -->
                        (e.start_date &lt;= curdate() and e.end_date >= curdate())
                    </if>
                    <if test='val == "open"'> <!-- 오픈 예정 -->
                        e.start_date > curdate()
                    </if>
                    <if test='val == "end"'> <!-- 종료 -->
                        e.end_date &lt; curdate()
                    </if>
                </foreach>
            </if>
            <if test="type != null and type.size > 0">
                and
                <foreach collection="type" item="val" separator="or" open="(" close=")">
                    <if test='val == "reserve"'> <!-- 사전예약 가능 -->
                        (e.type = "reserve" or e.type = "both")
                    </if>
                    <if test='val == "wait"'> <!-- 현장대기 가능 -->
                        (e.type = "wait" or e.type = "both")
                    </if>
                    <if test='val == "both"'> <!-- 사전예약, 현장대기 둘 다 가능 -->
                        e.type = "both"
                    </if>
                </foreach>
            </if>
        </where>
        GROUP BY e.event_no
        ORDER BY e.end_date
    </select>
    <!-- 오픈 예정 -->
    <select id="getOpenEventWithCondition" parameterType="list" resultType="event">
        SELECT e.*, AVG(r.star) AS avg_star
        FROM event e LEFT JOIN review r ON e.event_no = r.event_no
        <where>
            e.start_date > curdate()
            <if test="list != null and list.size > 0">
                and
                <foreach collection="list" item="val" separator="or" open="(" close=")">
                    <if test='val == "reserve"'> <!-- 사전예약 가능 -->
                        (e.type = "reserve" or e.type = "both")
                    </if>
                    <if test='val == "wait"'> <!-- 현장대기 가능 -->
                        (e.type = "wait" or e.type = "both")
                    </if>
                    <if test='val == "both"'> <!-- 사전예약, 현장대기 둘 다 가능 -->
                        e.type = "both"
                    </if>
                </foreach>
            </if>
        </where>
        GROUP BY e.event_no
        ORDER BY e.start_date
    </select>
    <!-- 인기순 -->
    <select id="getPopularEventWithCondition" parameterType="map" resultType="event">
        SELECT e.*, AVG(rev.star) AS avg_star,
        COUNT(DISTINCT r.member_no) + COUNT(DISTINCT w.email) AS total_count
        FROM event e
            LEFT JOIN reserve r ON e.event_no = r.event_no
            LEFT JOIN wait w ON e.event_no = w.event_no
            LEFT JOIN review rev ON e.event_no = rev.event_no
        <where>
            <if test="state != null and state.size > 0">
                and
                <foreach collection="state" item="val" separator="or" open="(" close=")">
                    <if test='val == "still"'> <!-- 진행 중 -->
                        (start_date &lt;= curdate() and end_date >= curdate())
                    </if>
                    <if test='val == "open"'> <!-- 오픈 예정 -->
                        e.start_date > curdate()
                    </if>
                    <if test='val == "end"'> <!-- 종료 -->
                        e.end_date &lt; curdate()
                    </if>
                </foreach>
            </if>
            <if test="type != null and type.size > 0">
                and
                <foreach collection="type" item="val" separator="or" open="(" close=")">
                    <if test='val == "reserve"'> <!-- 사전예약 가능 -->
                        (e.type = "reserve" or e.type = "both")
                    </if>
                    <if test='val == "wait"'> <!-- 현장대기 가능 -->
                        (e.type = "wait" or e.type = "both")
                    </if>
                    <if test='val == "both"'> <!-- 사전예약, 현장대기 둘 다 가능 -->
                        e.type = "both"
                    </if>
                </foreach>
            </if>
        </where>
        GROUP BY e.event_no
        ORDER BY total_count DESC, end_date, start_date <!-- count 가 같은 경우 end_date 오름차순 후 start_date 오름차순 정렬-->
    </select>
    <!--별점순 - 진행중, 종료 이벤트만 조회 -->
    <select id="getStarEventWithCondition" parameterType="map" resultType="event">
        SELECT e.*, AVG(r.star) AS avg_star
        FROM event AS e
        JOIN review AS r ON e.event_no = r.event_no
        <where>
            <if test="state == null or state.size == 0">
                e.start_date &lt;= curdate()
            </if>
            <if test="state != null and state.size > 0">
                and
                <foreach collection="state" item="val" separator="or" open="(" close=")">
                    <if test='val == "still"'> <!-- 진행 중 -->
                        (e.start_date &lt;= curdate() and e.end_date >= curdate())
                    </if>
                    <if test='val == "end"'> <!-- 종료 -->
                        e.end_date &lt; curdate()
                    </if>
                </foreach>
            </if>
            <if test="type != null and type.size > 0">
                and
                <foreach collection="type" item="val" separator="or" open="(" close=")">
                    <if test='val == "reserve"'> <!-- 사전예약 가능 -->
                        (e.type = "reserve" or e.type = "both")
                    </if>
                    <if test='val == "wait"'> <!-- 현장대기 가능 -->
                        (e.type = "wait" or e.type = "both")
                    </if>
                    <if test='val == "both"'> <!-- 사전예약, 현장대기 둘 다 가능 -->
                        e.type = "both"
                    </if>
                </foreach>
            </if>
        </where>
        GROUP BY e.event_no
        ORDER BY avg_star DESC, end_date, start_date <!-- 별점이 같은 경우 end_date 오름차순 후 start_date 오름차순 정렬-->
    </select>
    <!--카테고리별 -->
    <select id="getEventByCategoryWithCondition" parameterType="map" resultType="event">
        SELECT e.*
        FROM event AS e JOIN category AS c ON e.category_no = c.category_no
        <where>
            e.category_no = #{category_no} and
            c.name != "기타" <!--기타 카테고리는 제외-->
            <if test="state != null and state.size > 0">
                and
                <foreach collection="state" item="val" separator="or" open="(" close=")">
                    <if test='val == "still"'> <!-- 진행 중 -->
                        (e.start_date &lt;= curdate() and e.end_date >= curdate())
                    </if>
                    <if test='val == "open"'> <!-- 오픈 예정 -->
                        e.start_date > curdate()
                    </if>
                    <if test='val == "end"'> <!-- 종료 -->
                        e.end_date &lt; curdate()
                    </if>
                </foreach>
            </if>
            <if test="type != null and type.size > 0">
                and
                <foreach collection="type" item="val" separator="or" open="(" close=")">
                    <if test='val == "reserve"'> <!-- 사전예약 가능 -->
                        (e.type = "reserve" or e.type = "both")
                    </if>
                    <if test='val == "wait"'> <!-- 현장대기 가능 -->
                        (e.type = "wait" or e.type = "both")
                    </if>
                    <if test='val == "both"'> <!-- 사전예약, 현장대기 둘 다 가능 -->
                        e.type = "both"
                    </if>
                </foreach>
            </if>
        </where>
        ORDER BY e.end_date
    </select>

    <!-- 이벤트 상세 조회 -->
    <select id="getEventDetails" resultType="event">
        SELECT *
        FROM event
        WHERE event_no = #{event_no}
    </select>
    <!-- 멤버 관심 이벤트 여부 조회 -->
    <select id="getEventDetailsWithInterest" parameterType="Map" resultType="event">
        with
        e as (select * from event where event_no = #{event_no}),
        i as (select * from event_interest where member_no = #{member_no})
        select e.*, i.event_interest_no
        from e left join i on e.event_no = i.event_no
    </select>
    <select id="getEventDetailWithName" resultType="event">
        select *
        from event
        where name = #{name}
    </select>
    <!--  event photo 가져오기  -->
    <select id="getEventImage" resultType="event">
        SELECT event_no, image_path
        FROM events
        WHERE event_no = #{eventNo}
    </select>
    <!-- 이벤트 관심 갯수 가져오기-->
    <select id="getEventInterest" resultType="int">
        SELECT count(member_no)
        FROM event_interest
        WHERE event_no = #{event_no}
    </select>
    <!-- 크롤링 -->
    <!-- 기존 테이블에 존재하지 않은 이벤트이면 삽입 -->
    <insert id="insertCrawlingEvent" parameterType="event">
        insert into event  (name, start_date, end_date, addr, info, homepage, sns)
        select #{name}, #{start_date}, #{end_date}, #{addr}, #{info}, #{homepage}, #{sns}
        from dual where not exists (
            select event_no
            from event
            where name=#{name} and start_date=#{start_date} and end_date=#{end_date})
    </insert>
    <!-- 이벤트 이름으로 이벤트 번호 조회 -->
    <select id="selectEventNoByEventName" parameterType="String" resultType="String">
        select event_no
        from event
        where name=#{name}
    </select>
    <!-- 이벤트 이미지 업데이트 (등록) -->
    <update id="updateEventImg" parameterType="Map">
        update event
        set img_path = #{img_path}
        where event_no = #{event_no}
    </update>

    <!--예약하기-->
    <insert id="insertReserve" parameterType="reserve">
        insert into reserve (event_no, member_no, reserve_date, reserve_time, reserve_order)
        values(#{event_no},#{member_no},#{reserve_date},#{reserve_time},#{reserve_order})
    </insert>
    <!--예약 순서 체크-->
    <select id="checkReserve" parameterType="Map" resultType="reserve">
        select * from reserve
        where event_no=#{event_no} AND reserve_date=#{reserve_date} AND reserve_time=#{reserve_time}
        ORDER BY reserve_order DESC limit 1
    </select>
    <!--예약 인원 체크-->
    <select id="checkLimit" resultType="Integer">
        select count(*) from reserve
        where event_no=#{event_no}
    </select>

    <!-- 관심 이벤트 등록, 해제 -->
    <insert id="insertEventInterest" parameterType="Map">
        insert into event_interest (event_no, member_no) value
        (#{event_no}, #{member_no})
    </insert>
    <delete id="deleteEventInterest" parameterType="Map">
        delete from event_interest
        where event_no = #{event_no} and member_no = #{member_no}
    </delete>

    <!-- 관심 이벤트 조회 -->
    <select id="selectEventInterestByMemberNo" resultType="eventInterest">
        select i.*, e.name, e.start_date, e.end_date, e.addr, e.img_path
        from event e inner join event_interest i on e.event_no = i.event_no
        where i.member_no = #{member_no}
    </select>

    <!-- 특정 회원의 이벤트 예약/대기 내역 조회 -->
    <select id="selectMemberEvent" resultType="memberEvent">
        select r.reserve_no as index_no, e.event_no, e.name, e.addr, e.img_path, r.state, m.member_no, r.reserve_date as enter_date, r.reserve_time as enter_time
        from reserve r
            left join member m on r.member_no = m.member_no
            left join event e on r.event_no = e.event_no
        where m.member_no = #{member_no}
        union
        select w.wait_no as index_no, e.event_no, e.name, e.addr, e.img_path, w.state, m.member_no, w.wait_date as enter_date, null as enter_time
        from wait w
            left join member m on w.email = m.email
            left join event e on w.event_no = e.event_no
        where m.member_no = #{member_no}
        order by enter_date desc
    </select>

    <!-- 이벤트 전체조회-->
    <select id="selectAll" resultType="event">
        SELECT * FROM event
    </select>

    <!-- 회원별 관심 카테고리 오픈 예정 이벤트 조회 -->
    <select id="selectNewEvent" resultType="event">
        select * from event e
        where start_date &lt; date_add(curdate(), interval 2 week) and
            start_date >= curdate() and
            e.category_no in (
                select ci.category_no
                from category_interest ci
                where ci.member_no = #{member_no})
        order by start_date
    </select>

    <!-- 진행 중이고 현장대기 가능한 이벤트 조회 -->
    <select id="selectWaitEvent" resultType="int">
        select event_no
        from event
        where start_date &lt;= curdate() and end_date >= curdate() and type in ("both", "wait");
    </select>

    <!-- 페이지네이션 -->
    <select id="countEventWithPage" parameterType="map" resultType="int">
        select count(e.event_no)
        from event e
        <choose>
            <when test="type == null">

            </when>
            <when test='type == "event"'>
                where e.name like concat('%', #{keyword}, '%')
            </when>
            <when test='type == "addr"'>
                where e.addr like concat('%', #{keyword}, '%')
            </when>
            <when test='type == "category"'>
                where e.event_no in (
                    select e.event_no
                    from event e left join category c on e.category_no = c.category_no
                    where c.name like concat('%', #{keyword}, '%'))
            </when>
        </choose>
    </select>
    <select id="selectEventWithPage" parameterType="map" resultType="event">
        select e.*,c.*
        from event e left join category c on e.category_no = c.category_no
        <choose>
            <when test="type == null">

            </when>
            <when test='type == "event"'>
                where e.name like concat('%', #{keyword}, '%')
            </when>
            <when test='type == "addr"'>
                where e.addr like concat('%', #{keyword}, '%')
            </when>
            <when test='type == "category"'>
                where c.name like concat('%', #{keyword}, '%')
            </when>
        </choose>
        ORDER BY
        <if test="sort != null and direction != null">
            ${sort} ${direction}
        </if>
        <if test="sort == null or direction == null">
            event_no DESC
        </if>
        limit ${offset}, ${pageSize}
    </select>

</mapper>